// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: proto/blockchain.proto

package blockchain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Distribution_Registrar_FullMethodName               = "/blockchain.Distribution/registrar"
	Distribution_Handshake_FullMethodName               = "/blockchain.Distribution/handshake"
	Distribution_NewTransactionBroadcast_FullMethodName = "/blockchain.Distribution/newTransactionBroadcast"
	Distribution_NewBlockBroadcast_FullMethodName       = "/blockchain.Distribution/newBlockBroadcast"
)

// DistributionClient is the client API for Distribution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Distribution functions of the blockchain
type DistributionClient interface {
	// Registration and Handshakes for the nodes and DNS
	Registrar(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*IPReply, error)
	Handshake(ctx context.Context, in *Handshake, opts ...grpc.CallOption) (*KnownPeers, error)
	NewTransactionBroadcast(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Empty, error)
	NewBlockBroadcast(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Empty, error)
}

type distributionClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributionClient(cc grpc.ClientConnInterface) DistributionClient {
	return &distributionClient{cc}
}

func (c *distributionClient) Registrar(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*IPReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPReply)
	err := c.cc.Invoke(ctx, Distribution_Registrar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionClient) Handshake(ctx context.Context, in *Handshake, opts ...grpc.CallOption) (*KnownPeers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KnownPeers)
	err := c.cc.Invoke(ctx, Distribution_Handshake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionClient) NewTransactionBroadcast(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Distribution_NewTransactionBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionClient) NewBlockBroadcast(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Distribution_NewBlockBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributionServer is the server API for Distribution service.
// All implementations must embed UnimplementedDistributionServer
// for forward compatibility.
//
// Distribution functions of the blockchain
type DistributionServer interface {
	// Registration and Handshakes for the nodes and DNS
	Registrar(context.Context, *Registration) (*IPReply, error)
	Handshake(context.Context, *Handshake) (*KnownPeers, error)
	NewTransactionBroadcast(context.Context, *Transaction) (*Empty, error)
	NewBlockBroadcast(context.Context, *Block) (*Empty, error)
	mustEmbedUnimplementedDistributionServer()
}

// UnimplementedDistributionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDistributionServer struct{}

func (UnimplementedDistributionServer) Registrar(context.Context, *Registration) (*IPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registrar not implemented")
}
func (UnimplementedDistributionServer) Handshake(context.Context, *Handshake) (*KnownPeers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedDistributionServer) NewTransactionBroadcast(context.Context, *Transaction) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTransactionBroadcast not implemented")
}
func (UnimplementedDistributionServer) NewBlockBroadcast(context.Context, *Block) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBlockBroadcast not implemented")
}
func (UnimplementedDistributionServer) mustEmbedUnimplementedDistributionServer() {}
func (UnimplementedDistributionServer) testEmbeddedByValue()                      {}

// UnsafeDistributionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributionServer will
// result in compilation errors.
type UnsafeDistributionServer interface {
	mustEmbedUnimplementedDistributionServer()
}

func RegisterDistributionServer(s grpc.ServiceRegistrar, srv DistributionServer) {
	// If the following call pancis, it indicates UnimplementedDistributionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Distribution_ServiceDesc, srv)
}

func _Distribution_Registrar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).Registrar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_Registrar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).Registrar(ctx, req.(*Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribution_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Handshake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_Handshake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).Handshake(ctx, req.(*Handshake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribution_NewTransactionBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).NewTransactionBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_NewTransactionBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).NewTransactionBroadcast(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribution_NewBlockBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).NewBlockBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_NewBlockBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).NewBlockBroadcast(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

// Distribution_ServiceDesc is the grpc.ServiceDesc for Distribution service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Distribution_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.Distribution",
	HandlerType: (*DistributionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registrar",
			Handler:    _Distribution_Registrar_Handler,
		},
		{
			MethodName: "handshake",
			Handler:    _Distribution_Handshake_Handler,
		},
		{
			MethodName: "newTransactionBroadcast",
			Handler:    _Distribution_NewTransactionBroadcast_Handler,
		},
		{
			MethodName: "newBlockBroadcast",
			Handler:    _Distribution_NewBlockBroadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/blockchain.proto",
}
